/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import static main.Customer.customerId;
import static main.Customer.firstNameField;
import static main.Customer.lastNameField;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Ahmed
 */
public class BuyDrug extends javax.swing.JFrame {

    Connection con = null;
    PreparedStatement pre = null;
    ResultSet res = null;
    static Customer customer;
    String t;
    String sql1;
    String sql2;
    String sql3;

    public BuyDrug() {
        initComponents();
        con = Connect.connect();
        refreshTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        customerid = new javax.swing.JLabel();
        customerId = new javax.swing.JTextField();
        txtDrugID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        quantityBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnPurchase = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customers = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        druglist = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        purchaseHistoryTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Purchase Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        customerid.setBackground(new java.awt.Color(51, 51, 51));
        customerid.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        customerid.setForeground(new java.awt.Color(255, 255, 255));
        customerid.setText("CustomerId");

        jLabel8.setBackground(new java.awt.Color(51, 51, 51));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Drug_ID  : ");

        quantityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Quantity}));

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Quantity");

        btnPurchase.setText("Generate Bill");
        btnPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerid)
                    .addComponent(jLabel8)
                    .addComponent(jLabel1))
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(customerId)
                    .addComponent(txtDrugID)
                    .addComponent(quantityBox, 0, 133, Short.MAX_VALUE))
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPurchase)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerid)
                    .addComponent(customerId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDrugID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(quantityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(btnPurchase)
                .addGap(16, 16, 16))
        );

        customers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "NAME", "LAST NAME", "DOB"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(customers);

        druglist.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        druglist.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                " Name", "Type", "Drug ID", "Price", "Expiration Date", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        druglist.getTableHeader().setReorderingAllowed(false);
        druglist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                druglistMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(druglist);

        purchaseHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Purchase ID", "Customer ID", "Drug ID", "Purchase Date", "Purchased Quantity", "Total Bill"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        purchaseHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseHistoryTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(purchaseHistoryTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersMouseClicked
        int row = customers.getSelectedRow();
        t = customers.getModel().getValueAt(row, 0).toString();
        String sql = "select *  from customers where CUSTOMER_ID='" + t + "' ";

        try {
            pre = con.prepareStatement(sql);
            res = pre.executeQuery();
            if (res.next()) {
                String CustomerId = res.getString("CUSTOMER_ID");
                customerId.setText(CustomerId);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 2);
        }
    }//GEN-LAST:event_customersMouseClicked


    private void druglistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_druglistMouseClicked
        int row = druglist.getSelectedRow();
        String t = druglist.getModel().getValueAt(row, 0).toString();
        String sql = "select * from drugs where DRUG_ID='" + t + "' ";
        try {
            pre = con.prepareStatement(sql);
            res = pre.executeQuery();
            if (res.next()) {
                String DrugId = res.getString("DRUG_ID");
                txtDrugID.setText(DrugId);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 2);
        }

    }//GEN-LAST:event_druglistMouseClicked

    private void btnPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseActionPerformed
        if (customerId.getText().equals("") || txtDrugID.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Complete Your Information", "Missing Information", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                // Pretpostavljamo da imate konekciju (Connection) prethodno uspostavljenu
                // Pretpostavljamo da imate JTextField objekte nazvane txtCustomerId, txtDrugID
                String sqlSelect = "SELECT SELLING_PRICE, QUANTITY FROM pharmacy.drugs WHERE DRUG_ID = ?";
                try (PreparedStatement selectStatement = con.prepareStatement(sqlSelect)) {
                    int drugId = Integer.parseInt(txtDrugID.getText());
                    selectStatement.setInt(1, drugId);

                    // Izvršavanje SELECT upita za dohvatanje cene leka i dostupne količine
                    try (ResultSet resultSet = selectStatement.executeQuery()) {
                        if (resultSet.next()) {
                            double sellingPrice = resultSet.getDouble("SELLING_PRICE");
                            int availableQuantity = resultSet.getInt("QUANTITY");

                            // Provjeri da li ima dovoljno zaliha
                            int requestedQuantity = Integer.parseInt(quantityBox.getSelectedItem().toString());
                            if (requestedQuantity > availableQuantity) {
                                JOptionPane.showMessageDialog(this, "Insufficient stock. Available quantity: " + availableQuantity, "Error", JOptionPane.ERROR_MESSAGE);
                                return;
                            }

                            // Izračunavanje ukupne cene
                            int customerID = Integer.parseInt(customerId.getText());
                            double totalBill = requestedQuantity * sellingPrice;

                            // SQL upit za unos podataka u 'purchase_history'
                            String sqlInsert = "INSERT INTO pharmacy.purchase_history (CUSTOMER_ID, DRUG_ID, PURCHASE_DATE, QUANTITY_PURCHASED, TOTAL_BILL) "
                                    + "VALUES (?, ?, NOW(), ?, ?)";
                            try (PreparedStatement insertStatement = con.prepareStatement(sqlInsert)) {
                                // Postavljanje vrednosti parametara
                                insertStatement.setInt(1, customerID);
                                insertStatement.setInt(2, drugId);
                                insertStatement.setInt(3, requestedQuantity);
                                insertStatement.setDouble(4, totalBill);

                                // Izvršavanje INSERT upita
                                int rowsAffected = insertStatement.executeUpdate();

                                if (rowsAffected > 0) {
                                    // Ažuriraj količinu leka
                                    updateDrugQuantity(txtDrugID.getText(), requestedQuantity);

                                    JOptionPane.showMessageDialog(this, "Purchase successful!");
                                    refreshTables();
                                    refreshPurchaseHistoryTable(); // Osveži tabelu purchase_history
                                } else {
                                    JOptionPane.showMessageDialog(this, "Purchase failed. Please check the IDs and try again.");
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Drug not found. Please check the drug ID.");
                        }
                    }
                }
            } catch (SQLException | NumberFormatException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error connecting to the database or invalid input.");
            }
        }

    }//GEN-LAST:event_btnPurchaseActionPerformed

    private void purchaseHistoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseHistoryTableMouseClicked
        refreshPurchaseHistoryTable();
    }//GEN-LAST:event_purchaseHistoryTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuyDrug.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuyDrug.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuyDrug.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuyDrug.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuyDrug().setVisible(true);
            }
        });
    }

    private void updateDrugQuantity(String drugId, int purchasedQuantity) {
        try {
            // SQL upit za ažuriranje stanja količine leka
            String updateQuantitySql = "UPDATE pharmacy.drugs SET QUANTITY = QUANTITY - ? WHERE DRUG_ID = ?";

            // Priprema SQL naredbe
            con.setAutoCommit(false);

            // Izvrši SQL upit za ažuriranje stanja količine leka
            pre = con.prepareStatement(updateQuantitySql);
            pre.setInt(1, purchasedQuantity);
            pre.setString(2, drugId);
            pre.execute();

            // Potvrdi promene u bazi podataka
            con.commit();
        } catch (Exception e) {
            // Prikazi poruku o grešci ako se pojavi problem prilikom izvršavanja SQL upita
            try {
                // Ako dođe do greške, poništi sve izmene u bazi podataka
                con.rollback();
            } catch (SQLException ex) {
                // Ako ne možemo poništiti izmene, prikaži poruku o grešci
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", 2);
            } finally {
                // Vrati auto-commit na prethodnu vrednost
                try {
                    con.setAutoCommit(true);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    private int getAvailableQuantity(String drugId) throws SQLException {
        String sql = "SELECT QUANTITY FROM pharmacy.drugs WHERE DRUG_ID = ?";
        pre = con.prepareStatement(sql);
        pre.setString(1, drugId);

        ResultSet rs = pre.executeQuery();
        if (rs.next()) {
            return rs.getInt("QUANTITY");
        }

        return 0;

    }

    private void refreshTables() {
        refreshCustomerTable();
        refreshDrugTable();
        refreshPurchaseHistoryTable();
    }

    private void refreshPurchaseHistoryTable() {
        String sql = "SELECT * FROM pharmacy.purchase_history";
        try {
            pre = con.prepareStatement(sql);
            res = pre.executeQuery();
            purchaseHistoryTable.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 2);
        }
    }

    private void refreshCustomerTable() {
        String sql = "select CUSTOMER_ID, FIRST_NAME, LAST_NAME from customers";
        try {
            pre = con.prepareStatement(sql);
            res = pre.executeQuery();
            customers.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 2);
        }
    }

    private void refreshDrugTable() {
        String sql = "select DRUG_ID, NAME, TYPE,  SELLING_PRICE, EXPIRATION_DATE, QUANTITY from drugs";
        try {
            pre = con.prepareStatement(sql);
            res = pre.executeQuery();
            druglist.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", 2);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPurchase;
    public static javax.swing.JTextField customerId;
    private javax.swing.JLabel customerid;
    private javax.swing.JTable customers;
    public static javax.swing.JTable druglist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable purchaseHistoryTable;
    private javax.swing.JComboBox<String> quantityBox;
    public javax.swing.JTextField txtDrugID;
    // End of variables declaration//GEN-END:variables
}
